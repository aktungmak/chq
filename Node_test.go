package main

import (
	"testing"
)

var sampPkt = []byte{
	0x47, 0x84, 0x91, 0x17, 0x8C, 0x8B, 0xE4, 0xBE, 0x31, 0x53, 0x96,
	0xB4, 0x08, 0x71, 0x53, 0xC2, 0xF2, 0xAF, 0x88, 0xA5, 0x9E, 0x76,
	0x16, 0x52, 0x8F, 0x70, 0xEF, 0x69, 0xBC, 0xBC, 0xCC, 0x09, 0x56,
	0xA6, 0x12, 0x00, 0xC3, 0x28, 0x36, 0x03, 0x0D, 0x5A, 0xFD, 0x17,
	0xBD, 0x5F, 0xAE, 0xDD, 0x5D, 0x3D, 0x29, 0x20, 0x51, 0x14, 0x9E,
	0x59, 0xC6, 0x74, 0xE2, 0x95, 0x81, 0xEA, 0xD4, 0xB5, 0xB7, 0x76,
	0xA5, 0x0D, 0x90, 0x4D, 0x72, 0x6C, 0xC3, 0xD0, 0x38, 0xC7, 0x5E,
	0x82, 0xCF, 0x97, 0xCE, 0xAD, 0x83, 0xD9, 0x09, 0x5A, 0xB2, 0xCF,
	0x0C, 0x44, 0x7E, 0xD3, 0xE2, 0xC6, 0x1B, 0x31, 0xAB, 0xA7, 0x5B,
	0x5B, 0xAE, 0xE2, 0xFB, 0x17, 0x9F, 0x5E, 0xF1, 0x0E, 0x36, 0x8E,
	0x06, 0x94, 0x78, 0x93, 0x86, 0x5B, 0x4C, 0x63, 0x65, 0xB4, 0x60,
	0x04, 0xF6, 0xA1, 0x74, 0x8A, 0xF1, 0xC4, 0x3C, 0x2A, 0x65, 0xF1,
	0x34, 0x75, 0x26, 0xDF, 0xF4, 0xD5, 0xA2, 0xD4, 0xAC, 0x4E, 0xC1,
	0xA9, 0x52, 0xE3, 0x24, 0x98, 0x5E, 0x37, 0x6F, 0xF4, 0x73, 0x89,
	0x77, 0xD4, 0x8D, 0x7E, 0x89, 0xB9, 0xBC, 0x26, 0xDE, 0x0B, 0x05,
	0xED, 0xF4, 0x4B, 0x70, 0x66, 0xF2, 0x15, 0x2B, 0x90, 0x58, 0x27,
	0xFD, 0x6F, 0x9D, 0xC8, 0x61, 0x5A, 0xCF, 0x99, 0x9A, 0x4A, 0x11, 0x81}

var sampPcrPkt = []byte{
	0x47, 0x04, 0x91, 0x36, 0x07, 0x10, 0x48, 0xC2, 0xB3, 0x6C, 0xFE,
	0x85, 0x4A, 0x7B, 0x98, 0x42, 0x81, 0x51, 0xB2, 0xC2, 0x9E, 0xDD,
	0x43, 0x47, 0xF3, 0x10, 0xB1, 0x29, 0x6A, 0x93, 0x34, 0x80, 0xB0,
	0x4E, 0xE5, 0x68, 0xF8, 0xE6, 0x1C, 0x86, 0x3F, 0xFD, 0x25, 0x20,
	0x20, 0xBF, 0x60, 0x28, 0xFA, 0xDF, 0x28, 0x0E, 0x92, 0x1F, 0xB6,
	0x37, 0x74, 0xD8, 0xA7, 0x68, 0xD5, 0xC9, 0x48, 0xD2, 0xD1, 0x48,
	0xBF, 0x92, 0x72, 0x0A, 0x9E, 0xFC, 0x8B, 0x1E, 0x1D, 0x81, 0xFE,
	0x60, 0x2B, 0x5A, 0x97, 0xCC, 0x0C, 0x3F, 0x7E, 0xDE, 0x62, 0x1B,
	0xF9, 0x83, 0xB6, 0x70, 0xD2, 0x55, 0x18, 0x83, 0x72, 0xA8, 0xF2,
	0xD3, 0x9F, 0xC0, 0xF4, 0xD7, 0x55, 0xCD, 0x30, 0xBC, 0x16, 0x9A,
	0xFC, 0x92, 0xE8, 0x10, 0x8F, 0x70, 0x30, 0xB8, 0x7E, 0x3E, 0xFC,
	0xB5, 0x11, 0x25, 0x04, 0x70, 0x21, 0x0D, 0x52, 0x3C, 0x3F, 0xDE,
	0x1C, 0x74, 0x32, 0x99, 0x5D, 0xA0, 0xDA, 0x52, 0x3F, 0xCC, 0x3B,
	0xA3, 0x39, 0x69, 0x22, 0x48, 0x22, 0xAB, 0x4E, 0xA0, 0x30, 0xFA,
	0xE9, 0xC6, 0x2F, 0xE8, 0x29, 0x00, 0x9D, 0x26, 0x4F, 0x4E, 0xC1,
	0x7F, 0xA3, 0x7A, 0xCE, 0xC3, 0x57, 0x46, 0x5C, 0x83, 0x12, 0xC6,
	0x9E, 0x78, 0xED, 0xF9, 0x07, 0x1B, 0xFB, 0xF6, 0xDE, 0xDA, 0xCF, 0x2E}

func BenchmarkSend(b *testing.B) {
	node := TsNode{}
	out1 := make(chan TsPacket)
	out2 := make(chan TsPacket)

	node.RegisterListener(out1)
	node.RegisterListener(out2)

	pkt := NewTsPacket(sampPkt)
	go func() {
		for p := range out1 {
			p = p
		}
	}()
	go func() {
		for p := range out2 {
			p = p
		}
	}()

	node.Toggle()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		node.Send(pkt)
	}
	close(out1)
	close(out2)
}

func TestPidRemapper(t *testing.T) {
	node, _ := NewPidRemapper(1169, 202)
	ipkt := NewTsPacket(sampPkt)
	out := make(chan TsPacket)

	node.RegisterListener(out)
	node.Toggle()

	node.GetInputChan() <- ipkt
	opkt := <-out

	if opkt.Header.Pid != 202 {
		t.Errorf("opkt.Header.Pid is incorrect, got %d", opkt.Header.Pid)
	}
	if ((int(opkt.bytes[1])&31)<<8)+int(opkt.bytes[2]) != 202 {
		t.Errorf("pid in opkt.bytes is incorrect")
	}
}

func BenchmarkPidRemapper(b *testing.B) {
	node, _ := NewPidRemapper(1169, 202)
	out := make(chan TsPacket)

	node.RegisterListener(out)

	pkt := NewTsPacket(sampPkt)
	go func() {
		for {
			<-out
		}
	}()

	node.Toggle()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		node.GetInputChan() <- pkt
	}
	// close(out)
}

func TestPcrBrCommenter(t *testing.T) {
	// in this test we are simulating a bitrate of 100kbps
	// over a period of 7 packets.
	// therefore the PCR_base needs to increment by 6768 ticks
	// this test may need to be updated when the node takes
	// into account the pcr_ext

	node, _ := NewPcrBrCommenter(1169)
	// padding packet
	ipkt := NewTsPacket(sampPkt)
	// pcr packet
	ppkt := NewTsPacket(sampPcrPkt)

	out := make(chan TsPacket)

	node.RegisterListener(out)
	node.Toggle()

	node.GetInputChan() <- ppkt
	<-out
	node.GetInputChan() <- ipkt
	<-out
	node.GetInputChan() <- ipkt
	<-out
	node.GetInputChan() <- ipkt
	<-out
	node.GetInputChan() <- ipkt
	<-out

	ppkt.AdaptationField.Pcrb += 6768

	node.GetInputChan() <- ppkt

	opkt := <-out

	if node.CurBr != 100000.0 {
		t.Errorf("bit rate in node.CurBr is incorrect, got %f", node.CurBr)
	}
	if opkt.Comment != "100000.000000" {
		t.Errorf("bit rate in opkt.Comment is incorrect, got '%s'", opkt.Comment)
	}
}

func BenchmarkPcrBrCommenter(b *testing.B) {
	node, _ := NewPcrBrCommenter(1169)
	out := make(chan TsPacket)

	node.RegisterListener(out)

	pkt := NewTsPacket(sampPcrPkt)
	go func() {
		for {
			<-out
		}
	}()

	node.Toggle()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		node.GetInputChan() <- pkt
	}
}
